package com.example.springboot;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.5.5.
 */
@SuppressWarnings("rawtypes")
public class NumberService extends Contract {
    private static final String BINARY = "6080604052670de0b6b3a7640000600a55678ac7230489e80000600b55670de0b6b3a7640000600c55603c600d5534801561003957600080fd5b5060008054600160a060020a03191633179055613cb68061005b6000396000f3fe608060405260043610610168576000357c0100000000000000000000000000000000000000000000000000000000900480636574ae6e116100d3578063e3f15aa41161008c578063e3f15aa41461039c578063ef37b6b6146103b1578063f60beeba146103d1578063f6d198ef146103f1578063f99a4b3914610411578063fbcdd0071461043157610168565b80636574ae6e146102cc5780636e3f05f6146102e1578063999a980c14610301578063a4ce789514610321578063bdbb119b1461034f578063d839ab8b1461037c57610168565b80632f971029116101255780632f9710291461022f578063337ecbf01461024f578063429a1bb014610262578063512dda0214610277578063528521311461028c57806356d99ab6146102ac57610168565b8063039ae5f61461016d5780630de085b71461019857806312aa3274146101ad5780631b7cae81146101c257806323878577146101d557806325b435fc14610202575b600080fd5b34801561017957600080fd5b50610182610444565b60405161018f9190613a09565b60405180910390f35b6101ab6101a63660046130a3565b61052b565b005b3480156101b957600080fd5b50610182610773565b6101ab6101d036600461313a565b610842565b3480156101e157600080fd5b506101f56101f03660046130a3565b6108c1565b60405161018f9190613beb565b34801561020e57600080fd5b5061022261021d3660046130a3565b6108f3565b60405161018f9190613a1a565b34801561023b57600080fd5b506101ab61024a36600461307d565b61092f565b6101ab61025d3660046130a3565b6109b0565b34801561026e57600080fd5b506101f5610dcd565b34801561028357600080fd5b50610182610de4565b34801561029857600080fd5b506101ab6102a73660046130a3565b610eb3565b3480156102b857600080fd5b506101ab6102c73660046130a3565b611253565b3480156102d857600080fd5b50610182611567565b3480156102ed57600080fd5b506101ab6102fc3660046130a3565b611636565b34801561030d57600080fd5b5061022261031c3660046130e5565b61187b565b34801561032d57600080fd5b5061034161033c3660046130a3565b6118be565b60405161018f929190613bf9565b34801561035b57600080fd5b5061036f61036a3660046130a3565b61191f565b60405161018f9190613a3a565b34801561038857600080fd5b5061036f6103973660046130a3565b611b8d565b3480156103a857600080fd5b50610182611ca9565b3480156103bd57600080fd5b506101ab6103cc3660046131aa565b611e96565b3480156103dd57600080fd5b506101ab6103ec3660046131aa565b61204b565b3480156103fd57600080fd5b506101ab61040c3660046131f5565b6121da565b34801561041d57600080fd5b5061034161042c3660046130a3565b612413565b6101ab61043f3660046131aa565b612477565b336000908152600260209081526040808320600101805482518185028101850190935280835260609492939192909184015b828210156105215760008481526020908190208301805460408051601f600260001961010060018716150201909416939093049283018590048502810185019091528181529283018282801561050d5780601f106104e25761010080835404028352916020019161050d565b820191906000526020600020905b8154815290600101906020018083116104f057829003601f168201915b505050505081526020019060010190610476565b5050505090505b90565b600882826040518083838082843791909101948552505060405192839003602001909220600201541515915061058190505760405160e560020a62461bcd02815260040161057890613b3b565b60405180910390fd5b34600883836040518083838082843780830192505050925050509081526020016040518091039020600101541015156105cf5760405160e560020a62461bcd02815260040161057890613adb565b33600160a060020a031660038383604051808383808284379190910194855250506040519283900360200190922054600160a060020a03169290921415915061062f90505760405160e560020a62461bcd02815260040161057890613a8b565b600882826040518083838082843791909101948552505060405192839003602001909220600201544210915061067c90505760405160e560020a62461bcd02815260040161057890613abb565b60088282604051808383808284378083019250505092505050908152602001604051809103902060010154600260006008858560405180838380828437919091019485525050604080516020948190038501902054600160a060020a0316855292840194909452509081016000206002018054939093019092555051339060089084908490808383808284379190910194855250506040519283900360200183208054600160a060020a0395909516600160a060020a031990951694909417909355503491506008908490849080838380828437919091019485525050604051928390036020019092206001019290925550505050565b60606007805480602002602001604051908101604052809291908181526020016000905b828210156105215760008481526020908190208301805460408051601f600260001961010060018716150201909416939093049283018590048502810185019091528181529283018282801561082e5780601f106108035761010080835404028352916020019161082e565b820191906000526020600020905b81548152906001019060200180831161081157829003601f168201915b505050505081526020019060010190610797565b600b5434146108665760405160e560020a62461bcd02815260040161057890613afb565b336000908152600260205260409081902090518591859185908590808383808284378083019250505092505050908152602001604051809103902091906108ae929190612e61565b5050600b54600180549091019055505050565b600060048383604051808383808284379190910194855250506040519283900360200190922054925050505b92915050565b60006003838360405180838380828437919091019485525050604051928390036020019092205460ff60a060020a909104169250505092915050565b3360008181526002602081905260408220015490549091600160a060020a03909116141561096257600180546000909155015b604051600160a060020a0383169082156108fc029083906000818181858888f19350505050158015610998573d6000803e3d6000fd5b50503360009081526002602081905260408220015550565b6000600160a060020a031660038383604051808383808284379190910194855250506040519283900360200190922054600160a060020a031692909214159150610a6b905057600a543414610a1a5760405160e560020a62461bcd02815260040161057890613b0b565b610a5a3383838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506128a392505050565b600a54600180549091019055610dc9565b60048282604051808383808284379190910194855250506040519283900360200190922054159150610dae9050576004828260405180838380828437919091019485525050604051928390036020019092205434149150610ae390505760405160e560020a62461bcd02815260040161057890613acb565b33600160a060020a031660038383604051808383808284379190910194855250506040519283900360200190922054600160a060020a031692909214159150610b4390505760405160e560020a62461bcd02815260040161057890613b9b565b60006003838360405180838380828437919091019485525050604080516020948190038501812054601f8801869004860282018601909252868152600160a060020a039091169450610bb79333935085925087908790819084018382808284376000920191909152503492506129a0915050565b60006004848460405180838380828437919091019485525050604051928390036020019092209290925550600090505b600554811015610d6057610cd2600582815481101515610c0357fe5b600091825260209182902001805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815292830182828015610c915780601f10610c6657610100808354040283529160200191610c91565b820191906000526020600020905b815481529060010190602001808311610c7457829003601f168201915b505050505085858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612c2092505050565b15610d5857600580546000198101908110610ce957fe5b90600052602060002001600582815481101515610d0257fe5b906000526020600020019080546001816001161561010002031660029004610d2b929190612edf565b5060058054801515610d3957fe5b600190038181906000526020600020016000610d559190612f54565b90555b600101610be7565b506000600384846040518083838082843791909101948552505060405192839003602001909220805493151560a060020a0260a060020a60ff02199094169390931790925550610dc9915050565b60405160e560020a62461bcd02815260040161057890613b8b565b5050565b336000908152600260208190526040909120015490565b60606009805480602002602001604051908101604052809291908181526020016000905b828210156105215760008481526020908190208301805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815292830182828015610e9f5780601f10610e7457610100808354040283529160200191610e9f565b820191906000526020600020905b815481529060010190602001808311610e8257829003601f168201915b505050505081526020019060010190610e08565b6008828260405180838380828437919091019485525050604051928390036020019092206002015415159150610f0090505760405160e560020a62461bcd02815260040161057890613aeb565b600882826040518083838082843791909101948552505060405192839003602001909220600201544210159150610f4e90505760405160e560020a62461bcd02815260040161057890613bbb565b611017600883836040518083838082843791909101948552505060405192839003602001832054600160a060020a0316926003925086915085908083838082843791909101948552505060408051938490036020908101852054601f8901829004820286018201909252878552600160a060020a03909116939250879150869081908401838280828437600092019190915250506040516008925088915087908083838082843780830192505050925050509081526020016040518091039020600101546129a0565b60005b6009548110156111935761110560098281548110151561103657fe5b600091825260209182902001805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152928301828280156110c45780601f10611099576101008083540402835291602001916110c4565b820191906000526020600020905b8154815290600101906020018083116110a757829003601f168201915b505050505084848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612c2092505050565b1561118b5760098054600019810190811061111c57fe5b9060005260206000200160098281548110151561113557fe5b90600052602060002001908054600181600116156101000203166002900461115e929190612edf565b506009805480151561116c57fe5b6001900381819060005260206000200160006111889190612f54565b90555b60010161101a565b50600060038383604051808383808284379190910194855250506040805160209481900385018120805460a060020a60ff02191660a060020a97151597909702969096179095556060850181526000808652938501849052848101939093525050516008908490849080838380828437919091019485525050604080516020948190038501902085518154600160a060020a031916600160a060020a03909116178155938501516001850155939093015160029092019190915550505050565b6000600160a060020a031660068383604051808383808284379190910194855250506040519283900360200190922060010154600160a060020a0316929092141591506112b790505760405160e560020a62461bcd02815260040161057890613b6b565b42600683836040518083838082843780830192505050925050509081526020016040518091039020600201541015156113055760405160e560020a62461bcd02815260040161057890613b7b565b6000600160a060020a031660068383604051808383808284379190910194855250506040519283900360200190922060030154600160a060020a03169290921491506113be9050576040517f6e3f05f60000000000000000000000000000000000000000000000000000000081523090636e3f05f69061138b9085908590600401613a28565b600060405180830381600087803b1580156113a557600080fd5b505af11580156113b9573d6000803e3d6000fd5b505050505b60005b60075481101561146b576113dd60078281548110151561103657fe5b15611463576007805460001981019081106113f457fe5b9060005260206000200160078281548110151561140d57fe5b906000526020600020019080546001816001161561010002031660029004611436929190612edf565b506007805480151561144457fe5b6001900381819060005260206000200160006114609190612f54565b90555b6001016113c1565b50600060038383604051808383808284379190910194855250506040805160209481900385018120805460a060020a60ff02191660a060020a9715159790970296909617909555608085018152600080865284860181905285820181905281518083018352818152948501526060850193909352505051600690849084908083838082843791909101948552505060408051602094819003850190208551815585850151600182018054600160a060020a0319908116600160a060020a03938416179091559287015160028301556060909601518051600383018054909416971696909617909155939092015160049093019290925550505050565b60606005805480602002602001604051908101604052809291908181526020016000905b828210156105215760008481526020908190208301805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152928301828280156116225780601f106115f757610100808354040283529160200191611622565b820191906000526020600020905b81548152906001019060200180831161160557829003601f168201915b50505050508152602001906001019061158b565b600682826040518083838082843791909101948552505060405192839003602001909220600401541515915061168390505760405160e560020a62461bcd02815260040161057890613a9b565b42600683836040518083838082843780830192505050925050509081526020016040518091039020600301600101541015156116d45760405160e560020a62461bcd02815260040161057890613bab565b600080905042600d5460068585604051808383808284378083019250505092505050908152602001604051809103902060020154011015156117195750600c54611726565b600c546001805490910190555b6117ca600684846040518083838082843791909101948552505060405192839003602001832060010154600160a060020a0316926006925087915086908083838082843791909101948552505060408051938490036020908101852060030154601f8a01829004820286018201909252888552600160a060020a039091169392508891508790819084018382808284376000920191909152508792506129a0915050565b6040805180820182526000808252602082015290516006908590859080838380828437919091019485525050604051602093819003840190208451600382018054600160a060020a031916600160a060020a03909216919091179055939092015160049093019290925550506007805460018101808355600092909252611874907fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688018585612e61565b5050505050565b60008060038585604051808383808284379190910194855250506040519283900360200190922054600160a060020a0386811691161493505050505b9392505050565b60008060068484604051808383808284379190910194855250506040519283900360200183205492600692508791508690808383808284378083019250505092505050908152602001604051809103902060020154915091505b9250929050565b6060600060038484604051808383808284379190910194855250506040519283900360200190922054600160a060020a03169250505080151561199757505060408051808201909152600781527f556e6f776e65640000000000000000000000000000000000000000000000000060208201526108ed565b600160a060020a038116600090815260026020526040908190209051611a76919086908690808383808284379190910194855250506040805160209481900385018120805460026001821615610100026000190190911604601f81018790048702830187019093528282529094909350909150830182828015611a5b5780601f10611a3057610100808354040283529160200191611a5b565b820191906000526020600020905b815481529060010190602001808311611a3e57829003601f168201915b50505050506020604051908101604052806000815250612c20565b1515611b4857600160a060020a03811660009081526002602052604090819020905185908590808383808284379190910194855250506040805160209481900385018120805460026001821615610100026000190190911604601f81018790048702830187019093528282529094909350909150830182828015611b3b5780601f10611b1057610100808354040283529160200191611b3b565b820191906000526020600020905b815481529060010190602001808311611b1e57829003601f168201915b50505050509150506108ed565b604080516c01000000000000000000000000600160a060020a038416026020820152815180820360140181526034909101909152611b8590612c36565b9150506108ed565b33600090815260026020526040908190209051606091829185908590808383808284379190910194855250506040805160209481900385018120805460026001821615610100026000190190911604601f81018790048702830187019093528282529094909350909150830182828015611c485780601f10611c1d57610100808354040283529160200191611c48565b820191906000526020600020905b815481529060010190602001808311611c2b57829003601f168201915b50505050509050611c69816020604051908101604052806000815250612c20565b156118b757505060408051808201909152600b81527f4e4f5f4e49434b4e414d4500000000000000000000000000000000000000000060208201526108ed565b3360009081526002602090815260408083206001018054825181850281018501909352808352606094859484015b82821015611d825760008481526020908190208301805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815292830182828015611d6e5780601f10611d4357610100808354040283529160200191611d6e565b820191906000526020600020905b815481529060010190602001808311611d5157829003601f168201915b505050505081526020019060010190611cd7565b50505050905060608151604051908082528060200260200182016040528015611dbf57816020015b6060815260200190600190039081611daa5790505b50905060005b8251811015611e8f5760038382815181101515611dde57fe5b906020019060200201516040518082805190602001908083835b60208310611e175780518252601f199092019160209182019101611df8565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092205460a060020a900460ff16159150611e879050578281815181101515611e6457fe5b906020019060200201518282815181101515611e7c57fe5b602090810290910101525b600101611dc5565b5091505090565b33600160a060020a031660038484604051808383808284379190910194855250506040519283900360200190922054600160a060020a0316929092149150611ef590505760405160e560020a62461bcd02815260040161057890613a4b565b6003838360405180838380828437919091019485525050604051928390036020019092205460ff60a060020a90910416159150611f4990505760405160e560020a62461bcd02815260040161057890613a6b565b6001600384846040518083838082843791909101948552505060405192839003602001909220805493151560a060020a0260a060020a60ff02199094169390931790925550506009805460018101808355600092909252611fcd907f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af018585612e61565b505060408051606081018252600080825260208201524283018183015290516008908590859080838380828437919091019485525050604080516020948190038501902085518154600160a060020a031916600160a060020a0390911617815593850151600185015593909301516002909201919091555050505050565b6000811161206e5760405160e560020a62461bcd02815260040161057890613bdb565b33600160a060020a031660038484604051808383808284379190910194855250506040519283900360200190922054600160a060020a03169290921491506120cd90505760405160e560020a62461bcd02815260040161057890613a7b565b6003838360405180838380828437919091019485525050604051928390036020019092205460ff60a060020a9091041615915061212190505760405160e560020a62461bcd02815260040161057890613aab565b60016003848460405180838380828437919091019485525050604051928390036020018320805494151560a060020a0260a060020a60ff02199095169490941790935550670de0b6b3a7640000830291506004908590859080838380828437919091019485525050604051928390036020019092209290925550506005805460018101808355600092909252611874907f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0018585612e61565b600082116121fd5760405160e560020a62461bcd02815260040161057890613bdb565b33600160a060020a031660038585604051808383808284379190910194855250506040519283900360200190922054600160a060020a031692909214915061225c90505760405160e560020a62461bcd02815260040161057890613a4b565b6003848460405180838380828437919091019485525050604051928390036020019092205460ff60a060020a909104161591506122b090505760405160e560020a62461bcd02815260040161057890613b5b565b6001600385856040518083838082843791909101948552505060405192839003602001909220805493151560a060020a0260a060020a60ff02199094169390931790925550506007805460018101808355600092909252612334907fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688018686612e61565b505060806040519081016040528083670de0b6b3a764000002815260200133600160a060020a03168152602001428301815260200160408051908101604052806000600160a060020a031681526020016000815250815250600685856040518083838082843791909101948552505060408051602094819003850190208551815585850151600182018054600160a060020a0319908116600160a060020a039384161790915592870151600283015560609096015180516003830180549094169716969096179091559390920151600490930192909255505050505050565b6000806008848460405180838380828437808301925050509250505090815260200160405180910390206001015460088585604051808383808284378083019250505092505050908152602001604051809103902060020154915091509250929050565b60068383604051808383808284379190910194855250506040519283900360200190922054151591506124c190505760405160e560020a62461bcd02815260040161057890613b2b565b34600c54600a8360068787604051808383808284378083019250505092505050908152602001604051809103902060000154028115156124fd57fe5b04011461251f5760405160e560020a62461bcd02815260040161057890613a5b565b6000600160a060020a031660068484604051808383808284379190910194855250506040519283900360200190922060030154600160a060020a031692909214915061258290505760405160e560020a62461bcd02815260040161057890613b4b565b33600160a060020a031660068484604051808383808284379190910194855250506040519283900360200190922060010154600160a060020a0316929092141591506125e590505760405160e560020a62461bcd02815260040161057890613bcb565b60004282019050806006858560405180838380828437808301925050509250505090815260200160405180910390206002015411151561263a5760405160e560020a62461bcd02815260040161057890613b1b565b604080519081016040528033600160a060020a03168152602001828152506006858560405180838380828437919091019485525050604051602093819003840181208551600382018054600160a060020a031916600160a060020a0390921691909117905594909301516004909401939093555061272791503390600690879087908083838082843791909101948552505060408051938490036020908101852060010154601f8b01829004820286018201909252898552600160a060020a0390911693925089915088908190840183828082843760009201919091525050600c54340391506129a09050565b60005b6007548110156118745761281560078281548110151561274657fe5b600091825260209182902001805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152928301828280156127d45780601f106127a9576101008083540402835291602001916127d4565b820191906000526020600020905b8154815290600101906020018083116127b757829003601f168201915b505050505086868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612c2092505050565b1561289b5760078054600019810190811061282c57fe5b9060005260206000200160078281548110151561284557fe5b90600052602060002001908054600181600116156101000203166002900461286e929190612edf565b506007805480151561287c57fe5b6001900381819060005260206000200160006128989190612f54565b90555b60010161272a565b604080519081016040528083600160a060020a03168152602001600015158152506003826040518082805190602001908083835b602083106128f65780518252601f1990920191602091820191016128d7565b51815160209384036101000a6000190180199092169116179052920194855250604080519485900382019094208551815496830151600160a060020a0319909716600160a060020a039182161760a060020a60ff02191660a060020a9715159790970296909617905593861660009081526002855292832060019081018054918201808255908552938590208651949561299a959190920193509086019150612f9b565b50505050565b604080519081016040528085600160a060020a03168152602001600015158152506003836040518082805190602001908083835b602083106129f35780518252601f1990920191602091820191016129d4565b51815160209384036101000a6000190180199092169116179052920194855250604080519485900382019094208551815496830151600160a060020a0319909716600160a060020a039182161760a060020a60ff02191660a060020a971515979097029690961790559387166000908152600290945250508120600101905b8154811015612bb157612b258282815481101515612a8c57fe5b600091825260209182902001805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815292830182828015612b1a5780601f10612aef57610100808354040283529160200191612b1a565b820191906000526020600020905b815481529060010190602001808311612afd57829003601f168201915b505050505085612c20565b15612ba957815482906000198101908110612b3c57fe5b906000526020600020018282815481101515612b5457fe5b906000526020600020019080546001816001161561010002031660029004612b7d929190612edf565b50818054801515612b8a57fe5b600190038181906000526020600020016000612ba69190612f54565b90555b600101612a72565b50600160a060020a0385166000908152600260209081526040822060019081018054918201808255908452928290208651612bf493919092019190870190612f9b565b505050600160a060020a0390921660009081526002602081905260409091200180549092019091555050565b8051602091820120825192909101919091201490565b6060806040805190810160405280601081526020017f30313233343536373839616263646566000000000000000000000000000000008152509050606083516002026002016040519080825280601f01601f191660200182016040528015612ca5576020820181803883390190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181101515612cd857fe5b906020010190600160f860020a031916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181101515612d2057fe5b906020010190600160f860020a031916908160001a90535060005b8451811015612e59578260048683815181101515612d5557fe5b90602001015160f860020a900460f860020a02600160f860020a031916908060020a820491505060f860020a900460ff16815181101515612d9257fe5b90602001015160f860020a900460f860020a028282600202600201815181101515612db957fe5b906020010190600160f860020a031916908160001a905350828582815181101515612de057fe5b90602001015160f860020a900460f860020a02600f60f860020a021660f860020a900460ff16815181101515612e1257fe5b90602001015160f860020a900460f860020a028282600202600301815181101515612e3957fe5b906020010190600160f860020a031916908160001a905350600101612d3b565b509392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612ea25782800160ff19823516178555612ecf565b82800160010185558215612ecf579182015b82811115612ecf578235825591602001919060010190612eb4565b50612edb929150613009565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612f185780548555612ecf565b82800160010185558215612ecf57600052602060002091601f016020900482015b82811115612ecf578254825591600101919060010190612f39565b50805460018160011615610100020316600290046000825580601f10612f7a5750612f98565b601f016020900490600052602060002090810190612f989190613009565b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612fdc57805160ff1916838001178555612ecf565b82800160010185558215612ecf579182015b82811115612ecf578251825591602001919060010190612fee565b61052891905b80821115612edb576000815560010161300f565b60006118b78235613c2f565b600080601f8301841361304157600080fd5b50813567ffffffffffffffff81111561305957600080fd5b60208301915083600182028301111561191857600080fd5b60006118b78235610528565b60006020828403121561308f57600080fd5b600061309b8484613023565b949350505050565b600080602083850312156130b657600080fd5b823567ffffffffffffffff8111156130cd57600080fd5b6130d98582860161302f565b92509250509250929050565b6000806000604084860312156130fa57600080fd5b833567ffffffffffffffff81111561311157600080fd5b61311d8682870161302f565b9350935050602061313086828701613023565b9150509250925092565b6000806000806040858703121561315057600080fd5b843567ffffffffffffffff81111561316757600080fd5b6131738782880161302f565b9450945050602085013567ffffffffffffffff81111561319257600080fd5b61319e8782880161302f565b95989497509550505050565b6000806000604084860312156131bf57600080fd5b833567ffffffffffffffff8111156131d657600080fd5b6131e28682870161302f565b9350935050602061313086828701613071565b6000806000806060858703121561320b57600080fd5b843567ffffffffffffffff81111561322257600080fd5b61322e8782880161302f565b9450945050602061324187828801613071565b925050604061325287828801613071565b91505092959194509250565b600061326982613c1a565b8084526020840193508360208202850161328285613c14565b60005b848110156132b957838303885261329d8383516132fd565b92506132a882613c14565b602098909801979150600101613285565b50909695505050505050565b6132ce81613c1e565b82525050565b60008284526020840193506132ea838584613c3a565b6132f383613c72565b9093019392505050565b600061330882613c1a565b80845261331c816020860160208601613c46565b61332581613c72565b9093016020019392505050565b602e81527f547279696e6720746f2072656e74206f75742061206e756d626572207468617460208201527f20796f7520646f6e2774206f776e000000000000000000000000000000000000604082015260600190565b602881527f496e616465717561746520707269636520666f722072656e74696e672074686960208201527f73206e756d626572000000000000000000000000000000000000000000000000604082015260600190565b602381527f4e756d626572206973206e6f7420617661696c61626c6520666f72206175637460208201527f696f6e0000000000000000000000000000000000000000000000000000000000604082015260600190565b602981527f547279696e6720746f206c697374206e756d626572207468617420796f75206460208201527f6f6e2774206f776e210000000000000000000000000000000000000000000000604082015260600190565b601781527f43616e277420626964206f6e206f776e206e756d626572000000000000000000602082015260400190565b601a81527f4e756d6265722069736e277420626565696e672072656e746564000000000000602082015260400190565b602381527f4e756d626572206973206e6f7420617661696c61626c6520666f72206c69737460208201527f696e670000000000000000000000000000000000000000000000000000000000604082015260600190565b600f81527f41756374696f6e206973206f7665720000000000000000000000000000000000602082015260400190565b602281527f496e616465717561746520707269636520666f72206c6973746564206e756d6260208201527f6572000000000000000000000000000000000000000000000000000000000000604082015260600190565b601681527f426964206973206e6f74206869676820656e6f75676800000000000000000000602082015260400190565b601781527f4e756d6265722069736e277420696e2061756374696f6e000000000000000000602082015260400190565b602781527f496e616465717561746520616d6f756e74206f6620657468657220666f72206e60208201527f69636b6e616d6500000000000000000000000000000000000000000000000000604082015260600190565b603f81527f547279696e6720746f2062757920612066726565206e756d6265722c2077697460208201527f6820616e20696e616465717561746520616d6f756e74206f6620657468657200604082015260600190565b603681527f547279696e6720746f2072656e74206e756d62657220666f72206c6f6e67657260208201527f207468616e2069747320617661696c6162696c69747900000000000000000000604082015260600190565b602481527f54686973206e756d626572206973206e6f7420617661696c61626c6520746f2060208201527f72656e7400000000000000000000000000000000000000000000000000000000604082015260600190565b60208082527f4e756d6265722069736e277420617661696c61626c6520746f20626964206f6e9082015260400190565b602481527f54686973206e756d62657220697320616c726561647920626565696e6720726560208201527f6e74656400000000000000000000000000000000000000000000000000000000604082015260600190565b60208082527f4e756d626572206973206e6f7420617661696c61626c6520666f722072656e749082015260400190565b60208082527f4e756d626572206973206e6f74206c69737465642061732072656e7461626c659082015260400190565b60208082527f52656e74206475726174696f6e206861736e27742065787069726564207965749082015260400190565b603481527f4e756d626572206973206e65697468657220617661696c61626c65206e6f722060208201527f6c69737465642062792069742773206f776e6572000000000000000000000000604082015260600190565b601481527f43616e277420627579206f776e206e756d626572000000000000000000000000602082015260400190565b601f81527f52656e742073657373696f6e206861736e277420657870697265642079657400602082015260400190565b601681527f41756374696f6e2069736e2774206f7665722079657400000000000000000000602082015260400190565b601581527f43616e27742072656e74206f776e206e756d6265720000000000000000000000602082015260400190565b602281527f52656e742070726963652068617320746f20626520686967686572207468616e60208201527f2030000000000000000000000000000000000000000000000000000000000000604082015260600190565b6132ce81610528565b602080825281016118b7818461325e565b602081016108ed82846132c5565b6020808252810161309b8184866132d4565b602080825281016118b781846132fd565b602080825281016108ed81613332565b602080825281016108ed81613388565b602080825281016108ed816133de565b602080825281016108ed81613434565b602080825281016108ed8161348a565b602080825281016108ed816134ba565b602080825281016108ed816134ea565b602080825281016108ed81613540565b602080825281016108ed81613570565b602080825281016108ed816135c6565b602080825281016108ed816135f6565b602080825281016108ed81613626565b602080825281016108ed8161367c565b602080825281016108ed816136d2565b602080825281016108ed81613728565b602080825281016108ed8161377e565b602080825281016108ed816137ae565b602080825281016108ed81613804565b602080825281016108ed81613834565b602080825281016108ed81613864565b602080825281016108ed81613894565b602080825281016108ed816138ea565b602080825281016108ed8161391a565b602080825281016108ed8161394a565b602080825281016108ed8161397a565b602080825281016108ed816139aa565b602081016108ed8284613a00565b60408101613c078285613a00565b6118b76020830184613a00565b60200190565b5190565b151590565b600160a060020a031690565b60006108ed82613c23565b82818337506000910152565b60005b83811015613c61578181015183820152602001613c49565b8381111561299a5750506000910152565b601f01601f19169056fea265627a7a723058200b889fd3b7cc40b11c8df8977d3d1a060d09816f8b6fae6d15a5783dc63228006c6578706572696d656e74616cf50037";

    public static final String FUNC_SEEOWNEDNUMBERS = "seeOwnedNumbers";

    public static final String FUNC_AUCTIONBID = "auctionBid";

    public static final String FUNC_RENTSEEAVAILABLENUMBERS = "rentSeeAvailableNumbers";

    public static final String FUNC_BUYNICKNAME = "buyNickname";

    public static final String FUNC_SEEPRICEOFLISTEDNUMBER = "seePriceOfListedNumber";

    public static final String FUNC_ISNUMBERAVAILABLEFORAUCTIONORRENTORSALE = "isNumberAvailableForAuctionOrRentOrSale";

    public static final String FUNC_WITHDRAWMONEY = "withdrawMoney";

    public static final String FUNC_BUYNUMBER = "buyNumber";

    public static final String FUNC_SEEBALANCE = "seeBalance";

    public static final String FUNC_AUCTIONSEEAVAILABLE = "auctionSeeAvailable";

    public static final String FUNC_AUCTIONEND = "auctionEnd";

    public static final String FUNC_RENTENDAVAILABILITY = "rentEndAvailability";

    public static final String FUNC_SEELISTEDNUMBERS = "seeListedNumbers";

    public static final String FUNC_RENTENDINSTANCE = "rentEndInstance";

    public static final String FUNC_checkOwner = "checkOwner";

    public static final String FUNC_RENTGETINFORMATIONONNUMBER = "rentGetInformationOnNumber";

    public static final String FUNC_GETNICKNAMEFORNUMBER = "getNicknameForNumber";

    public static final String FUNC_GETAVAILABLEFORAUCTIONORRENTORSALENUMBERS = "getAvailableForAuctionOrRentOrSaleNumbers";

    public static final String FUNC_AUCTIONSTART = "auctionStart";

    public static final String FUNC_LISTNUMBER = "listNumber";

    public static final String FUNC_RENTMAKENUMBERAVAILABLE = "rentMakeNumberAvailable";

    public static final String FUNC_AUCTIONGETINFORMATION = "auctionGetInformation";

    public static final String FUNC_RENTNUMBER = "rentNumber";

    @Deprecated
    protected NumberService(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected NumberService(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected NumberService(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected NumberService(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<List> seeOwnedNumbers() {
        final Function function = new Function(FUNC_SEEOWNEDNUMBERS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> auctionBid(String number, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_AUCTIONBID, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(number)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<List> rentSeeAvailableNumbers() {
        final Function function = new Function(FUNC_RENTSEEAVAILABLENUMBERS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> buyNickname(String nickname, String number, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_BUYNICKNAME, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(nickname), 
                new org.web3j.abi.datatypes.Utf8String(number)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<BigInteger> seePriceOfListedNumber(String number) {
        final Function function = new Function(FUNC_SEEPRICEOFLISTEDNUMBER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(number)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Boolean> isNumberAvailableForAuctionOrRentOrSale(String number) {
        final Function function = new Function(FUNC_ISNUMBERAVAILABLEFORAUCTIONORRENTORSALE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(number)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> withdrawMoney(String sendTo) {
        final Function function = new Function(
                FUNC_WITHDRAWMONEY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, sendTo)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> buyNumber(String number, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_BUYNUMBER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(number)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<BigInteger> seeBalance() {
        final Function function = new Function(FUNC_SEEBALANCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<List> auctionSeeAvailable() {
        final Function function = new Function(FUNC_AUCTIONSEEAVAILABLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> auctionEnd(String number) {
        final Function function = new Function(
                FUNC_AUCTIONEND, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(number)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> rentEndAvailability(String number) {
        final Function function = new Function(
                FUNC_RENTENDAVAILABILITY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(number)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<List> seeListedNumbers() {
        final Function function = new Function(FUNC_SEELISTEDNUMBERS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> rentEndInstance(String number) {
        final Function function = new Function(
                FUNC_RENTENDINSTANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(number)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> checkOwner(String number, String suspectedOwner) {
        final Function function = new Function(FUNC_checkOwner, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(number), 
                new org.web3j.abi.datatypes.Address(160, suspectedOwner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Tuple2<BigInteger, BigInteger>> rentGetInformationOnNumber(String number) {
        final Function function = new Function(FUNC_RENTGETINFORMATIONONNUMBER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(number)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple2<BigInteger, BigInteger>>(function,
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<String> checkOwner(String number) {
        final Function function = new Function(FUNC_checkOwner, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(number)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> getNicknameForNumber(String number) {
        final Function function = new Function(FUNC_GETNICKNAMEFORNUMBER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(number)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<List> getAvailableForAuctionOrRentOrSaleNumbers() {
        final Function function = new Function(FUNC_GETAVAILABLEFORAUCTIONORRENTORSALENUMBERS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> auctionStart(String number, BigInteger nmbrSecondsDuration) {
        final Function function = new Function(
                FUNC_AUCTIONSTART, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(number), 
                new org.web3j.abi.datatypes.generated.Uint256(nmbrSecondsDuration)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> listNumber(String number, BigInteger price) {
        final Function function = new Function(
                FUNC_LISTNUMBER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(number), 
                new org.web3j.abi.datatypes.generated.Uint256(price)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> rentMakeNumberAvailable(String number, BigInteger pricePerTenSeconds, BigInteger nmbrSeconds) {
        final Function function = new Function(
                FUNC_RENTMAKENUMBERAVAILABLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(number), 
                new org.web3j.abi.datatypes.generated.Uint256(pricePerTenSeconds), 
                new org.web3j.abi.datatypes.generated.Uint256(nmbrSeconds)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple2<BigInteger, BigInteger>> auctionGetInformation(String number) {
        final Function function = new Function(FUNC_AUCTIONGETINFORMATION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(number)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple2<BigInteger, BigInteger>>(function,
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> rentNumber(String number, BigInteger nmbrSeconds, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_RENTNUMBER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(number), 
                new org.web3j.abi.datatypes.generated.Uint256(nmbrSeconds)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    @Deprecated
    public static NumberService load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new NumberService(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static NumberService load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new NumberService(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static NumberService load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new NumberService(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static NumberService load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new NumberService(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<NumberService> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(NumberService.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<NumberService> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(NumberService.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<NumberService> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(NumberService.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<NumberService> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(NumberService.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }
}
