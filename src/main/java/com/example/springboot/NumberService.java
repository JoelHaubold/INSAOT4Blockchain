package com.example.springboot;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.5.5.
 */
@SuppressWarnings("rawtypes")
public class NumberService extends Contract {
    private static final String BINARY = "";

    public static final String FUNC_SEEOWNEDNUMBERS = "seeOwnedNumbers";

    public static final String FUNC_AUCTIONBID = "auctionBid";

    public static final String FUNC_RENTSEEAVAILABLENUMBERS = "rentSeeAvailableNumbers";

    public static final String FUNC_BUYNICKNAME = "buyNickname";

    public static final String FUNC_SEEPRICEOFLISTEDNUMBER = "seePriceOfListedNumber";

    public static final String FUNC_WITHDRAWMONEY = "withdrawMoney";

    public static final String FUNC_BUYNUMBER = "buyNumber";

    public static final String FUNC_SEEBALANCE = "seeBalance";

    public static final String FUNC_AUCTIONSEEAVAILABLE = "auctionSeeAvailable";

    public static final String FUNC_AUCTIONEND = "auctionEnd";

    public static final String FUNC_RENTENDAVAILABILITY = "rentEndAvailability";

    public static final String FUNC_SEELISTEDNUMBERS = "seeListedNumbers";

    public static final String FUNC_RENTENDINSTANCE = "rentEndInstance";

    public static final String FUNC_checkOwner = "checkOwner";

    public static final String FUNC_RENTGETINFORMATIONONNUMBER = "rentGetInformationOnNumber";

    public static final String FUNC_AUCTIONSTART = "auctionStart";

    public static final String FUNC_LISTNUMBER = "listNumber";

    public static final String FUNC_RENTMAKENUMBERAVAILABLE = "rentMakeNumberAvailable";

    public static final String FUNC_AUCTIONGETINFORMATION = "auctionGetInformation";

    public static final String FUNC_RENTNUMBER = "rentNumber";

    @Deprecated
    protected NumberService(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected NumberService(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected NumberService(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected NumberService(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<List> seeOwnedNumbers() {
        final Function function = new Function(FUNC_SEEOWNEDNUMBERS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> auctionBid(String number, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_AUCTIONBID, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(number)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<List> rentSeeAvailableNumbers() {
        final Function function = new Function(FUNC_RENTSEEAVAILABLENUMBERS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> buyNickname(String nickname, String number, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_BUYNICKNAME, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(nickname), 
                new org.web3j.abi.datatypes.Utf8String(number)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<BigInteger> seePriceOfListedNumber(String number) {
        final Function function = new Function(FUNC_SEEPRICEOFLISTEDNUMBER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(number)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> withdrawMoney(String sendTo) {
        final Function function = new Function(
                FUNC_WITHDRAWMONEY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, sendTo)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> buyNumber(String number, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_BUYNUMBER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(number)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<BigInteger> seeBalance() {
        final Function function = new Function(FUNC_SEEBALANCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<List> auctionSeeAvailable() {
        final Function function = new Function(FUNC_AUCTIONSEEAVAILABLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> auctionEnd(String number) {
        final Function function = new Function(
                FUNC_AUCTIONEND, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(number)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> rentEndAvailability(String number) {
        final Function function = new Function(
                FUNC_RENTENDAVAILABILITY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(number)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<List> seeListedNumbers() {
        final Function function = new Function(FUNC_SEELISTEDNUMBERS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> rentEndInstance(String number) {
        final Function function = new Function(
                FUNC_RENTENDINSTANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(number)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> checkOwner(String number, String suspectedOwner) {
        final Function function = new Function(FUNC_checkOwner, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(number), 
                new org.web3j.abi.datatypes.Address(160, suspectedOwner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Tuple2<BigInteger, BigInteger>> rentGetInformationOnNumber(String number) {
        final Function function = new Function(FUNC_RENTGETINFORMATIONONNUMBER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(number)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple2<BigInteger, BigInteger>>(function,
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<String> checkOwner(String number) {
        final Function function = new Function(FUNC_checkOwner, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(number)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> auctionStart(String number, BigInteger nmbrSecondsDuration) {
        final Function function = new Function(
                FUNC_AUCTIONSTART, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(number), 
                new org.web3j.abi.datatypes.generated.Uint256(nmbrSecondsDuration)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> listNumber(String number, BigInteger price) {
        final Function function = new Function(
                FUNC_LISTNUMBER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(number), 
                new org.web3j.abi.datatypes.generated.Uint256(price)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> rentMakeNumberAvailable(String number, BigInteger price, BigInteger nmbrSeconds) {
        final Function function = new Function(
                FUNC_RENTMAKENUMBERAVAILABLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(number), 
                new org.web3j.abi.datatypes.generated.Uint256(price), 
                new org.web3j.abi.datatypes.generated.Uint256(nmbrSeconds)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple2<BigInteger, BigInteger>> auctionGetInformation(String number) {
        final Function function = new Function(FUNC_AUCTIONGETINFORMATION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(number)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple2<BigInteger, BigInteger>>(function,
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> rentNumber(String number, BigInteger nmbrSeconds, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_RENTNUMBER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(number), 
                new org.web3j.abi.datatypes.generated.Uint256(nmbrSeconds)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    @Deprecated
    public static NumberService load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new NumberService(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static NumberService load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new NumberService(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static NumberService load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new NumberService(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static NumberService load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new NumberService(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<NumberService> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(NumberService.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<NumberService> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(NumberService.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<NumberService> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(NumberService.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<NumberService> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(NumberService.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }
}
